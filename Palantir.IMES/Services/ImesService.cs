using Armali.Horizon.Logs;
using Armali.Horizon.Messaging;
using Armali.Horizon.Messaging.Model;
using Microsoft.Extensions.Hosting;
using Palantir.Core.Model;
using Palantir.Core.Services;

namespace Palantir.IMES.Services;

internal class ImesService(IHorizonLogger log, IHorizonMessaging messaging, AzureOpenAIService openai) : IHostedService
{
    private readonly IHorizonLogger _log = log;
    private readonly IHorizonMessaging _messaging = messaging;
    private readonly AzureOpenAIService _openai = openai;

    public Task StartAsync(CancellationToken cancellationToken)
    {
        _log.Info("IMES is starting...");
        _messaging.OnMessageReceived += IncomingMessage;
        _messaging.Listen("Conversation");

        new Thread(async () => { Thread.Sleep(4000); await SendTestMessage(); }).Start(); // Only for test purposes

        return Task.CompletedTask;
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        _log.Info("IMES is stopping...");

        return Task.CompletedTask;
    }

    private void IncomingMessage(MessagePayload payload)
    {
        _log.Trace($"New {payload.TypeHint} message received");

        // For the test phase, use the debug message type
        var message = payload.Deserialize<ConversationMessage>();

        if (message is null)
        {
            _log.Warning("Received message is null or not of type ConversationMessage");
            return;
        }

        _log.Info($"Received message with {message.Turns.Count()} turns.");
        _log.Info("Querying Azure OpenAI with the provided message...");

        // Make the query to Azure OpenAI
        var joinedQuery = string.Join('\n', message.Turns.Select(turn => $"{turn.Speaker}: {turn.Content}"));
        var task = _openai.QueryModel(joinedQuery);

        task.Wait();
        var response = task.Result;

        _log.Info($"Response from Azure OpenAI: {response.Replace("{", "{{").Replace("}", "}}")}");
    }

    public async Task SendTestMessage()
    {
        // Test conversation generated by LLM to simulate a real-world scenario
        var payload = new ConversationMessage
        {
            Turns =
            [
                new ConversationTurn
                {
                    Speaker = "Usuario",
                    Content = "¡Hola, Interlocutor! ¿Qué planes tienes para el sábado por la tarde? Estoy pensando en hacer una merienda en casa por mi cumple, algo sencillo. ¿Te apuntas?"
                },
                new ConversationTurn
                {
                    Speaker = "Interlocutor",
                    Content = "¡Hola, Usuario! Qué buena pinta tiene eso. Pero justo este sábado… creo que podrías querer dejarlo libre, por si acaso."
                },
                new ConversationTurn
                {
                    Speaker = "Usuario",
                    Content = "¿Dejarlo libre? ¿Por qué? No tengo nada más previsto, y me apetecía hacer algo tranquilo."
                },
                new ConversationTurn
                {
                    Speaker = "Interlocutor",
                    Content = "Lo entiendo, y suena genial. Pero a veces es bueno dejarse sorprender por el día, ¿no? Nunca se sabe qué puede surgir."
                },
                new ConversationTurn
                {
                    Speaker = "Usuario",
                    Content = "¿Estás diciendo que debería no hacer planes… por si acaso pasa algo?"
                },
                new ConversationTurn
                {
                    Speaker = "Interlocutor",
                    Content = "Digamos que a veces los mejores momentos son los que no planeamos. Solo te digo que tal vez te convenga tener el sábado sin compromisos. 😉"
                },
                new ConversationTurn
                {
                    Speaker = "Usuario",
                    Content = "Hmm… estás siendo muy misterioso. ¿No estarás escondiendo algo?"
                },
                new ConversationTurn
                {
                    Speaker = "Interlocutor",
                    Content = "¿Yo? ¡Jamás! Solo soy fan de los cumpleaños espontáneos. 😄"
                },
                new ConversationTurn
                {
                    Speaker = "Usuario",
                    Content = "Está bien, me convenciste. No haré planes… pero ahora tengo mucha curiosidad."
                },
                new ConversationTurn
                {
                    Speaker = "Interlocutor",
                    Content = "Perfecto. Solo relájate y deja que el sábado te sorprenda. ¡Te lo mereces!"
                }
            ]
        };
        await _messaging.SendMessage("Conversation", payload);
    }
}
